.cache_npm: &cache_npm
  key:
    files:
      - package-lock.json
  paths:
    - ~/.npm
  policy: pull

api:build:
  image: node:14.13
  stage: test
  needs: ['initialise']
  cache:
    <<: *cache_npm
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npx nx run api:build

api:lint:
  image: node:14.13
  stage: test
  needs: ['initialise']
  cache:
    <<: *cache_npm
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npx nx run api:lint

api:test:
  image: node:14.13
  stage: test
  needs: ['initialise']
  cache:
    <<: *cache_npm
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npx nx run api:test --skip-nx-cache --code-coverage
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  after_script:
    - bash <(curl https://codecov.io/bash) -F api -f coverage/apps/api/coverage-final.json
  artifacts:
    reports:
      cobertura: coverage/apps/api/cobertura-coverage.xml

api:e2e:
  image: node:14.13
  stage: test
  needs: ['initialise']
  cache:
    <<: *cache_npm
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npx nx run api-e2e:e2e

api:docker:
  image: 'registry.gitlab.com/gitlab-org/cluster-integration/auto-build-image:v0.4.0'
  stage: build
  needs: ['api:test', 'api:e2e']
  variables:
    DOCKER_TLS_CERTDIR: ''
    DOCKER_BUILDKIT: 1
    DOCKERFILE_PATH: apps/api/Dockerfile
  services:
    - docker:19.03.13-dind
  before_script:
    - export CI_JOB_TIMESTAMP=$(date --utc -Iseconds)
    - export AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS="--label org.opencontainers.image.source=${CI_PROJECT_URL}"
    - export AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS="${AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS} --label org.opencontainers.image.revision=${CI_COMMIT_SHA}"
    - export AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS="${AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS} --label org.opencontainers.image.created=${CI_JOB_TIMESTAMP}"
    - export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/api
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - /build/build.sh
  rules:
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'
